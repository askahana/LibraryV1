@page "/delete/{id:int}"
@inject ILibraryService _service
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (book != null)
{
    <div class="d-flex justify-content-center">
        <div class="card shadow border-0 mt-4" style="width: 40rem;">
            <div class="card-header bg-danger-subtle ml-0 py-3">
                <div class="row">
                    <div class="col-12 text-center">
                        <h1 class="text-black">Delete book</h1>
                    </div>
                </div>
            </div>
            <div class="card-body p-4">
                <EditForm Model="book" FormName="formDelete" OnValidSubmit="Submit">
                    <InputNumber @bind-Value="book.Id" hidden></InputNumber>
                    <div class="row mb-3">
                        <div class="col-2">
                            <label class="col-form-label">Title</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="book.Title" class="form-control" readonly></InputText>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-2">
                            <label class="col-form-label">Author</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="book.Author" class="form-control" readonly></InputText>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-2">
                            <label class="col-form-label">Availability</label>
                        </div>
                        <div class="col-6">
                            <InputCheckbox @bind-Value="book.IsAvailable" class="form-check-input" disabled></InputCheckbox>
                        </div>
                    </div>
                    <br />
                    <button class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" type="button">Delete</button>
                    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="deleteModalLabel">Are you sure to delete the book "@book.Title"?</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="submit" class="btn btn-primary">Yes, Delete!</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <GoBack></GoBack>

}

@code {
    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm]
    private BookDto book { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await _service.GetBookById<ResponseDTO>(Id);
        if (response != null && response.IsSuccess)
        {
            book ??= JsonConvert.DeserializeObject<BookDto>
            (Convert.ToString(response.Result));
        }
    }

    private async Task Submit()
    {
        if (book != null)
        {

            Console.WriteLine($"Attempting to delete book with ID: {book.Id}");
            var response = await _service.DeleteBookAsync<ResponseDTO>(book.Id);
            if (response != null && response.IsSuccess)
            {
                Console.WriteLine("Delete successful. Attempting to navigate to home page.");

                NavigationManager.NavigateTo("/booklist", forceLoad: true);
            }
            else
            {
                Console.WriteLine("Failed to delete");
            }
        }
        // if (book != null)
        // {
        //     Console.WriteLine($"Attempting to delete book with ID: {book.Id}");
        //     try
        //     {
        //         var response = await _service.DeleteBookAsync<ResponseDTO>(book.Id);
        //         if (response != null)
        //         {
        //             Console.WriteLine($"Delete response received. IsSuccess: {response.IsSuccess}");
        //             if (response.IsSuccess)
        //             {
        //                 Console.WriteLine("Delete successful. Navigating to home page.");
        //                 NavigationManager.NavigateTo("/", forceLoad: true);
        //             }
        //             else
        //             {
        //                 Console.WriteLine($"Delete failed. Error messages: {string.Join(", ", response.ErrorMessages ?? new List<string>())}");
        //             }
        //         }
        //         else
        //         {
        //             Console.WriteLine("Response is null, but delete might have succeeded. Checking book existence...");
        //             var checkResponse = await _service.GetBookById<ResponseDTO>(book.Id);
        //             if (checkResponse == null || !checkResponse.IsSuccess)
        //             {
        //                 Console.WriteLine("Book no longer exists. Assuming delete was successful.");
        //                 NavigationManager.NavigateTo("/", forceLoad: true);
        //             }
        //             else
        //             {
        //                 Console.WriteLine("Book still exists. Delete operation status unclear.");
        //             }
        //         }
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine($"Exception occurred during delete: {ex.Message}");
        //     }
        // }


    }

}
