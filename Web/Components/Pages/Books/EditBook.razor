@page "/edit/{id:int}"
@inject ILibraryService _libraryService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if(book != null)
{
    <EditForm Model="book" FormName ="formBook" OnValidSubmit="Submit">
        <InputNumber @bind-Value="book.Id" hidden></InputNumber>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="row mb-3">
             <div class="col-2">
                 <label class="col-form-label">Title</label>
             </div>
             <div class="col-6">
                 <InputText @bind-Value="book.Title" class="form-control"></InputText>
             </div>
        </div>
        <div class="row mb-3">
            <div class="col-2">
                <label class="col-form-label">Author</label>
            </div>
            <div class="col-6">
                <InputText @bind-Value="book.Author" class="form-control"></InputText>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-2">
                <label class="col-form-label">Availability</label>
            </div>
            <div class="col-6">
                <InputCheckbox @bind-Value="book.IsAvailable" class="form-check-input"></InputCheckbox>
            </div>
        </div>
        <br/>
        <button class="btn btn-outline-success" type="submit" >Update</button>

    </EditForm>

    <GoBack></GoBack>

}




@code {
    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm]
    private BookDto book { get; set; }


    // protected override async Task OnInitializedAsync()
    // {
    //     var response = await _libraryService.GetBookById<ResponseDTO>(Id);
    //     if(response != null && response.IsSuccess)
    //     {
    //         book = JsonConvert.DeserializeObject<BookDto>
    //         (Convert.ToString(response.Result));
    //     }
    // }

    // use this to receive paramter value
    protected override async Task OnParametersSetAsync()
    {
        var response = await _libraryService.GetBookById<ResponseDTO>(Id);
        if (response != null && response.IsSuccess)
        {
            book ??= JsonConvert.DeserializeObject<BookDto>
            (Convert.ToString(response.Result));
        }
    }

    private async Task Submit()
    {
        if(book != null)
        {
            var response = await _libraryService.UpdateBookAsync<ResponseDTO>(book);
            if (response != null && response.IsSuccess)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
               
                Console.WriteLine("Failed to update book");
            }
        }
        
    }
    

}
